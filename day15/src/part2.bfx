include "std.bfx"

const BASE = 10;
const WORD_BYTES = 8;

function normalize_word(&value) {
  for (let i = 0; i < (WORD_BYTES - 1); i++) {
    while (value[i] >= BASE) {
      value[i] -= BASE;
      value[i + 1]++;
    }
  }
}

function print_word(&value) {
  for (let i = 0; i < WORD_BYTES; i++) {
    printd(value[WORD_BYTES - 1 - i]);
  }
}

function hash_to_sum(&hash, &sum) {
  while (hash >= BASE) {
    sum[0] += BASE;
    hash -= BASE;
    normalize_word(sum);
  }
  sum[0] += hash;
  hash = 0;
  normalize_word(sum);
}

struct BoxArray {
  [128] low;
  [128] high;
};

function box_array_zero(&array) {
  zero(array.low);
  zero(array.high);
}

function box_array_get(&array, i, &out) {
  if (i < 128) {
    out = array.low[i];
  } else {
    out = array.high[i];
  }
}

function box_array_set(&array, i, value) {
  if (i < 128) {
    array.low[i] = value;
  } else {
    array.high[i] = value;
  }
}

function print_box_array(&array) {
  printc('[');
  for (let i = 0; i < 128; i++) {
    printd(array.low[i]);
    if (i != 127) {
      printc(' ');
    }
  }
  printc(']');
}

struct BoxMatrix {
  [struct BoxArray] row0,
  [struct BoxArray] row1,
  [struct BoxArray] row2,
  [struct BoxArray] row3,
  [struct BoxArray] row4,
  [struct BoxArray] row5,
  [struct BoxArray] row6;
};

function box_matrix_zero(&matrix) {
  box_array_zero(matrix.row0);
  box_array_zero(matrix.row1);
  box_array_zero(matrix.row2);
  box_array_zero(matrix.row3);
  box_array_zero(matrix.row4);
  box_array_zero(matrix.row5);
  box_array_zero(matrix.row6);
}

function box_matrix_get(&matrix, i, j, &out) {
  switch (i) {
    case 0: box_array_get(matrix.row0, j, out);
    case 1: box_array_get(matrix.row1, j, out);
    case 2: box_array_get(matrix.row2, j, out);
    case 3: box_array_get(matrix.row3, j, out);
    case 4: box_array_get(matrix.row4, j, out);
    case 5: box_array_get(matrix.row5, j, out);
    case 6: box_array_get(matrix.row6, j, out);
  }
}

function box_matrix_set(&matrix, i, j, value) {
  switch (i) {
    case 0: box_array_set(matrix.row0, j, value);
    case 1: box_array_set(matrix.row1, j, value);
    case 2: box_array_set(matrix.row2, j, value);
    case 3: box_array_set(matrix.row3, j, value);
    case 4: box_array_set(matrix.row4, j, value);
    case 5: box_array_set(matrix.row5, j, value);
    case 6: box_array_set(matrix.row6, j, value);
  }
}

function print_box_matrix(&matrix) {
  print_box_array(matrix.row0); printc('\n');
  print_box_array(matrix.row1); printc('\n');
  print_box_array(matrix.row2); printc('\n');
  print_box_array(matrix.row3); printc('\n');
  print_box_array(matrix.row4); printc('\n');
  print_box_array(matrix.row5); printc('\n');
  print_box_array(matrix.row6); printc('\n');
}

const PARSE_STATE_NAME = 0;
const PARSE_STATE_FOCAL_LENGTH = 1;

function main() {
  let c;

  let parse_state = PARSE_STATE_NAME;
  let [WORD_BYTES] name;
  let name_index = 0;
  let focal_length = 0;

  let hash = 0;
  let [WORD_BYTES] sum;

  let [struct BoxArray] box_sizes;
  let [struct BoxMatrix] box_names;
  let [struct BoxMatrix] box_focal_lengths;

  while (true) {
    c = scanc();
    switch (c) {
      case '\n': break;
      case ',': {
        prints("Inserting ");
        for (let i = 0; i < name_index; i++) {
          printc(name[i]);
        }
        prints(" at ");
        printd(hash);
        printc('\n');
        parse_state = PARSE_STATE_NAME;
        name_index = 0;
        hash = 0;
      }
      default: {
        if (c == '-' || c == '=') {
          parse_state = PARSE_STATE_FOCAL_LENGTH;
          focal_length = 0;
        } else {
          switch (parse_state) {
            case PARSE_STATE_NAME: {
              name[name_index] = c;
              name_index++;
              hash = (hash + c) * 17;
            }
            case PARSE_STATE_FOCAL_LENGTH: focal_length = c - '0';
          }
        }
      }
    }
  }

  print_word(sum);
}
