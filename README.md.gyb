%{
  import json

  with open('paths.json', 'r') as f:
    days = json.load(f)
  
  def format_day(day):
    lang = day['lang']
    path = day['path']
    s = f"[{lang['name']}]({path})"
    additional_notes = lang.get('additionalNotes', '')
    if additional_notes:
      s = f'{s} {additional_notes}'
    return s
}%
<!-- Automatically generated from README.md.gyb, do not edit directly! -->

# Advent of Code 2023

My solutions to the [Advent of Code 2023](https://adventofcode.com/2023), written in 25 different programming languages.

% for i, day in enumerate(days):
- [${'x' if day.get('completed', False) else ' '}] Day ${f'{i + 1:02}'}: ${format_day(day)}
% end

## Packaging

The programs are packaged with Nix, making it easy for CI to run a single workflow over all days regardless of the compiler/language used.

## Previous years

My solutions to the previous challenges can be found here:

- [`advent-of-code-2022`](https://github.com/fwcd/advent-of-code-2022)
- [`advent-of-code-2021`](https://github.com/fwcd/advent-of-code-2021)
- [`advent-of-code-2020`](https://github.com/fwcd/advent-of-code-2020)
- [`advent-of-code-2019`](https://github.com/fwcd/advent-of-code-2019)
- [`advent-of-code-2015`](https://github.com/fwcd/advent-of-code-2015)
